generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Dinner {
    id          Int       @id @default(autoincrement())
    name        String
    tags        Tag[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Plan        Plan[]
    link        String?
    notes       String?
    Household   Household @relation(fields: [householdId], references: [id])
    householdId String

    @@index([name])
}

model Tag {
    value  String   @id
    Dinner Dinner[]

    @@index([value])
}

model Plan {
    id     Int      @id @default(autoincrement())
    dinner Dinner   @relation(fields: [dinnerId], references: [id])
    date   DateTime @unique

    dinnerId Int

    @@index([date])
}

model User {
    id        String  @id
    firstName String?
    lastName  String?
    imageUrl  String?

    // Not managed by clerk
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    Memberships Membership[]
}

model Household {
    id        String       @id @default(cuid())
    name      String
    slug      String       @unique
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    Dinners   Dinner[]
    Members   Membership[]
    Invite    Invite[]
}

model Membership {
    id          Int       @id @default(autoincrement())
    household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
    householdId String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    role      MembershipRole
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@unique([householdId, userId])
}

enum MembershipRole {
    ADMIN
    MEMBER
}

model Invite {
    id String @id @default(cuid())

    household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
    householdId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
}
